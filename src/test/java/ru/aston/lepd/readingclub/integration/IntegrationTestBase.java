package ru.aston.lepd.readingclub.integration;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import ru.aston.lepd.readingclub.util.DataSource;
import ru.aston.lepd.readingclub.util.PropertiesUtil;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

@Testcontainers
public abstract class IntegrationTestBase {

    @Container
    static PostgreSQLContainer<?> postgreSQLContainer = new PostgreSQLContainer<>("postgres:latest");


    private static final String CLEAN_AUTHOR_BOOK_SQL = "DELETE FROM author_book";
    private static final String CLEAN_AUTHORS_SQL = "DELETE FROM authors";
    private static final String CLEAN_BOOKS_SQL = "DELETE FROM books";
    private static final String CLEAN_READERS_SQL = "DELETE FROM readers";

    private static final String UPDATE_AUTHOR_ID_SQL = "ALTER TABLE authors ALTER COLUMN id RESTART WITH 1";
    private static final String UPDATE_BOOKS_ID_SQL = "ALTER TABLE books ALTER COLUMN id RESTART WITH 1";
    private static final String UPDATE_READERS_ID_SQL = "ALTER TABLE readers ALTER COLUMN id RESTART WITH 1";


    private static final String CREATE_READERS_SQL = """
            CREATE TABLE IF NOT EXISTS readers (
                id      bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name    varchar(128) NOT NULL,
                surname varchar(128) NOT NULL,
                phone   varchar(12)  NOT NULL UNIQUE,
                address varchar(256)  NOT NULL
            );
            """;

    private static final String INSERT_READERS_SQL = """
            INSERT INTO readers (name, surname, phone, address)
            VALUES ('Ivan', 'Ivanov', '71111111111', 'Lenina 11'),
                   ('Petr', 'Petrov', '72222222222', 'Lenina 22'),
                   ('Sveta', 'Svetikova', '73333333333', 'Lenina 33');
            """;

    private static final String CREATE_BOOKS_SQL = """
            CREATE TABLE IF NOT EXISTS books (
                id               bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                title            varchar(128) NOT NULL,
                inventory_number bigint NOT NULL UNIQUE,
                reader_id        bigint REFERENCES readers(id) NOT NULL
            );
            """;

    private static final String INSERT_BOOKS_SQL = """
            INSERT INTO books (title, inventory_number, reader_id)
            VALUES ('Title1', 11111, 1),
                   ('Title2', 22222, 2),
                   ('Title3', 33333, 3);
            """;

    private static final String CREATE_AUTHORS_SQL = """
            CREATE TABLE IF NOT EXISTS authors (
                id        bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                full_name varchar(128) NOT NULL,
                personal_info varchar(256) NOT NULL
            );
            """;

    private static final String INSERT_AUTHORS_SQL = """
            INSERT INTO authors (full_name, personal_info)
            VALUES ('Author1', 'likes dogs'),
                   ('Author2', 'likes cats'),
                   ('Author3', 'likes wolfs');
            """;

    private static final String CREATE_AUTHOR_BOOK_SQL = """
            CREATE TABLE IF NOT EXISTS author_book (
                author_id bigint REFERENCES authors(id),
                book_id   bigint REFERENCES books(id),
                PRIMARY KEY (author_id, book_id)
            );
            """;

    private static final String INSERT_AUTHOR_BOOK_SQL = """
            INSERT INTO author_book (author_id, book_id)
            VALUES (1, 1),
                   (3, 1),
                   (2, 3),
                   (3, 3),
                   (2, 2);
            """;



    @BeforeAll
    static void prepareDatabase() throws SQLException {
        postgreSQLContainer.start();
        DataSource.initialize(postgreSQLContainer.getJdbcUrl(),
                postgreSQLContainer.getUsername(),
                postgreSQLContainer.getPassword(),
                postgreSQLContainer.getDriverClassName());

        try (Connection connection = DataSource.getConnection();
             Statement statement = connection.createStatement()) {
            statement.execute(CREATE_READERS_SQL);
            statement.execute(CREATE_BOOKS_SQL);
            statement.execute(CREATE_AUTHORS_SQL);
            statement.execute(CREATE_AUTHOR_BOOK_SQL);
        }
    }


    @BeforeEach
    void cleanData() throws SQLException {
        try (var connection = DataSource.getConnection();
             var statement = connection.createStatement()) {
            statement.execute(CLEAN_AUTHOR_BOOK_SQL);
            statement.execute(CLEAN_AUTHORS_SQL);
            statement.execute(CLEAN_BOOKS_SQL);
            statement.execute(CLEAN_READERS_SQL);

            statement.execute(UPDATE_AUTHOR_ID_SQL);
            statement.execute(UPDATE_BOOKS_ID_SQL);
            statement.execute(UPDATE_READERS_ID_SQL);

            statement.execute(INSERT_READERS_SQL);
            statement.execute(INSERT_BOOKS_SQL);
            statement.execute(INSERT_AUTHORS_SQL);
            statement.execute(INSERT_AUTHOR_BOOK_SQL);
        }
    }


    @AfterAll
    static void afterAll() throws SQLException {
        postgreSQLContainer.stop();
    }


}
